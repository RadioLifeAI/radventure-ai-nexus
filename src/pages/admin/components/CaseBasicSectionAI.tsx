
import React from "react";
import { Button } from "@/components/ui/button";
import { Brain, Loader2 } from "lucide-react";
import { useCaseAutofillAPIExpanded } from "../hooks/useCaseAutofillAPIExpanded";
import { useCaseTitleGenerator } from "../hooks/useCaseTitleGenerator";
import { toast } from "@/components/ui/use-toast";

interface CaseBasicSectionAIProps {
  form: any;
  setForm: (form: any) => void;
  onFieldsUpdated?: (fields: string[]) => void;
  disabled?: boolean;
  categories?: { id: number; name: string }[];
}

export function CaseBasicSectionAI({ 
  form, 
  setForm, 
  onFieldsUpdated,
  disabled = false,
  categories = []
}: CaseBasicSectionAIProps) {
  const { autofillBasicComplete, autofillMasterComplete, loading } = useCaseAutofillAPIExpanded();
  const { generateTitle } = useCaseTitleGenerator(categories);

  // CORRE√á√ÉO: Valida√ß√£o simplificada - apenas diagn√≥stico principal
  const hasPrimaryDiagnosis = React.useMemo(() => {
    const diagnosis = form.primary_diagnosis?.trim();
    const isValid = Boolean(diagnosis && diagnosis.length > 3);
    
    console.log('üîç CaseBasicSectionAI - Valida√ß√£o simplificada (apenas diagn√≥stico):', {
      primary_diagnosis: form.primary_diagnosis,
      trimmed: diagnosis,
      length: diagnosis?.length,
      isValid
    });
    
    return isValid;
  }, [form.primary_diagnosis]);

  const handleAutofillBasicComplete = async () => {
    try {
      console.log('ü§ñ CaseBasicSectionAI - Iniciando preenchimento de dados b√°sicos...');
      console.log('üîç CaseBasicSectionAI - Estado atual do form:', form);
      
      if (!hasPrimaryDiagnosis) {
        console.log('‚ùå CaseBasicSectionAI - Diagn√≥stico principal obrigat√≥rio');
        toast({ 
          title: "Diagn√≥stico Principal Obrigat√≥rio", 
          description: "Preencha o diagn√≥stico principal primeiro para usar a AI de Dados B√°sicos",
          variant: "destructive" 
        });
        return;
      }
      
      console.log('‚úÖ CaseBasicSectionAI - Diagn√≥stico v√°lido, tentando API b√°sica...');
      
      // TENTATIVA 1: Usar API b√°sica espec√≠fica
      let suggestions = await autofillBasicComplete(form);
      
      // MODO DE RECUPERA√á√ÉO: Se falhar, usar master AI e filtrar dados b√°sicos
      if (!suggestions || Object.keys(suggestions).length === 0) {
        console.log('‚ö†Ô∏è CaseBasicSectionAI - API b√°sica falhou, tentando modo de recupera√ß√£o com Master AI...');
        
        const masterSuggestions = await autofillMasterComplete(form);
        
        if (masterSuggestions) {
          // Filtrar apenas campos b√°sicos do resultado completo
          const basicFields = [
            'category_id', 'difficulty_level', 'points', 'modality', 'subtype',
            'patient_age', 'patient_gender', 'symptoms_duration', 'findings', 
            'patient_clinical_info'
          ];
          
          suggestions = {};
          basicFields.forEach(field => {
            if (masterSuggestions[field] !== undefined) {
              suggestions[field] = masterSuggestions[field];
            }
          });
          
          console.log('üîÑ CaseBasicSectionAI - Usando dados filtrados do Master AI:', suggestions);
        }
      }
      
      if (!suggestions || Object.keys(suggestions).length === 0) {
        console.log('‚ùå CaseBasicSectionAI - Nenhuma sugest√£o recebida em ambas as tentativas');
        toast({ 
          title: "Erro na AI de Dados B√°sicos", 
          description: "N√£o foi poss√≠vel gerar sugest√µes. Tente o bot√£o 'AI preencher tudo' como alternativa.",
          variant: "destructive" 
        });
        return;
      }

      console.log('‚úÖ CaseBasicSectionAI - Sugest√µes finais recebidas:', suggestions);

      // APLICA√á√ÉO ROBUSTA DAS SUGEST√ïES
      const updatedFields: string[] = [];
      const updates: any = {};

      // Campos b√°sicos com valida√ß√£o de tipo e logs detalhados
      const basicFieldsConfig = [
        { field: 'category_id', type: 'number' },
        { field: 'difficulty_level', type: 'number' },
        { field: 'points', type: 'number' },
        { field: 'modality', type: 'string' },
        { field: 'subtype', type: 'string' },
        { field: 'patient_age', type: 'string' },
        { field: 'patient_gender', type: 'string' },
        { field: 'symptoms_duration', type: 'string' },
        { field: 'findings', type: 'string' },
        { field: 'patient_clinical_info', type: 'string' }
      ];

      basicFieldsConfig.forEach(({ field, type }) => {
        if (suggestions[field] !== undefined && suggestions[field] !== null && suggestions[field] !== '') {
          let value = suggestions[field];
          
          // Convers√£o de tipos quando necess√°rio
          if (type === 'number' && typeof value !== 'number') {
            const numValue = parseInt(value);
            if (!isNaN(numValue)) {
              value = numValue;
            }
          }
          
          updates[field] = value;
          updatedFields.push(field);
          console.log(`‚úÖ CaseBasicSectionAI - Campo ${field} ser√° atualizado de "${form[field]}" para "${value}"`);
        } else {
          console.log(`‚ö†Ô∏è CaseBasicSectionAI - Campo ${field} ignorado: valor inv√°lido "${suggestions[field]}"`);
        }
      });

      // GERA√á√ÉO AUTOM√ÅTICA DO T√çTULO
      if (updates.category_id && updates.modality && updates.difficulty_level) {
        try {
          const titleData = generateTitle(
            Number(updates.category_id), 
            updates.modality, 
            Number(updates.difficulty_level)
          );
          updates.title = titleData.title;
          updates.case_number = titleData.case_number;
          updatedFields.push('title', 'case_number');
          
          console.log('üìù CaseBasicSectionAI - T√≠tulo gerado:', titleData);
        } catch (error) {
          console.error('‚ùå CaseBasicSectionAI - Erro ao gerar t√≠tulo:', error);
        }
      }

      if (Object.keys(updates).length > 0) {
        console.log('üîÑ CaseBasicSectionAI - Aplicando updates:', updates);
        console.log('üîÑ CaseBasicSectionAI - Form antes da atualiza√ß√£o:', form);
        
        // CORRE√á√ÉO CR√çTICA: Garantir atualiza√ß√£o imut√°vel com callback e logs
        setForm((prevForm: any) => {
          const newForm = { ...prevForm, ...updates };
          console.log('‚úÖ CaseBasicSectionAI - Form atualizado com sucesso!');
          console.log('üîç CaseBasicSectionAI - Form anterior:', prevForm);
          console.log('üîç CaseBasicSectionAI - Form novo:', newForm);
          console.log('üîç CaseBasicSectionAI - Diferen√ßas aplicadas:', updates);
          
          // Verifica√ß√£o de propaga√ß√£o ap√≥s timeout
          setTimeout(() => {
            console.log('üîÑ CaseBasicSectionAI - Verifica√ß√£o p√≥s-atualiza√ß√£o (ap√≥s 100ms)');
          }, 100);
          
          return newForm;
        });
        
        // Notificar campos atualizados
        if (onFieldsUpdated && updatedFields.length > 0) {
          console.log('üì¢ CaseBasicSectionAI - Notificando campos atualizados:', updatedFields);
          onFieldsUpdated(updatedFields);
        }
        
        const titleMessage = updates.title ? ` | T√≠tulo: "${updates.title}"` : '';
        
        toast({ 
          title: `ü§ñ AI: Dados B√°sicos Preenchidos!`,
          description: `${updatedFields.length} campos atualizados: categoria, dificuldade, modalidade${titleMessage}.` 
        });
        
      } else {
        console.log('‚ö†Ô∏è CaseBasicSectionAI - Nenhum campo v√°lido para atualizar');
        toast({ 
          title: "Dados insuficientes",
          description: "N√£o foi poss√≠vel determinar os dados b√°sicos com as informa√ß√µes fornecidas."
        });
      }

    } catch (error) {
      console.error('üí• CaseBasicSectionAI - Erro geral:', error);
      toast({ 
        title: "Erro na AI de Dados B√°sicos", 
        description: "Tente novamente ou use o bot√£o 'AI preencher tudo' como alternativa.",
        variant: "destructive" 
      });
    }
  };

  console.log('üé® CaseBasicSectionAI - Renderizando com hasPrimaryDiagnosis:', hasPrimaryDiagnosis);

  return (
    <div className="flex items-center gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
      <Button
        type="button"
        onClick={handleAutofillBasicComplete}
        disabled={loading || disabled || !hasPrimaryDiagnosis}
        variant="outline"
        size="sm"
        className={`${
          hasPrimaryDiagnosis 
            ? 'bg-blue-500 text-white hover:bg-blue-600 border-blue-500' 
            : 'bg-gray-300 text-gray-500 cursor-not-allowed border-gray-300'
        }`}
        data-testid="ai-basic-data-button"
      >
        {loading ? (
          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
        ) : (
          <Brain className="h-4 w-4 mr-2" />
        )}
        ü§ñ AI: Dados B√°sicos
      </Button>
      
      <div className="text-xs text-blue-700">
        <div>Preenche dados fundamentais do caso:</div>
        <div className="font-medium">Categoria ‚Ä¢ Dificuldade ‚Ä¢ Modalidade ‚Ä¢ Demografia ‚Ä¢ T√≠tulo</div>
        {!hasPrimaryDiagnosis && (
          <div className="text-red-600 font-semibold mt-1">
            üí° Preencha o Diagn√≥stico Principal primeiro para habilitar a AI de Dados B√°sicos
          </div>
        )}
        {hasPrimaryDiagnosis && (
          <div className="text-green-600 font-semibold mt-1">
            ‚úÖ Diagn√≥stico preenchido - Pronto para usar! (Modo de recupera√ß√£o ativo)
          </div>
        )}
      </div>
    </div>
  );
}
