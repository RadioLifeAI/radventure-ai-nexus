
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CaseData {
  title?: string;
  findings?: string;
  patient_clinical_info?: string;
  modality?: string;
  specialty?: string;
  primary_diagnosis?: string;
  main_symptoms?: string[];
  anatomical_regions?: string[];
  pathology_types?: string[];
  clinical_presentation_tags?: string[];
  case_complexity_factors?: string[];
  learning_objectives?: string[];
  search_keywords?: string[];
}

const STRUCTURED_EXTRACTION_PROMPT = `
Voc√™ √© um especialista em radiologia que deve extrair informa√ß√µes estruturadas de casos m√©dicos radiol√≥gicos.

Analise o seguinte caso e extraia as informa√ß√µes estruturadas em formato JSON:

REGRAS:
- Seja preciso e use terminologia m√©dica correta
- Para arrays, retorne sempre arrays, mesmo que vazios
- Use termos em portugu√™s brasileiro
- Para regi√µes anat√¥micas, seja espec√≠fico (ex: "Pulm√£o direito", "Lobo superior esquerdo")
- Para tipos de patologia, use classifica√ß√µes padr√£o (ex: "Infeccioso", "Neopl√°sico", "Inflamat√≥rio")

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "primary_diagnosis": "Diagn√≥stico principal claro e espec√≠fico",
  "secondary_diagnoses": ["Diagn√≥stico diferencial 1", "Diagn√≥stico diferencial 2"],
  "anatomical_regions": ["Regi√£o anat√¥mica 1", "Regi√£o anat√¥mica 2"],
  "finding_types": ["Tipo de achado 1", "Tipo de achado 2"],
  "laterality": "bilateral|direito|esquerdo|central",
  "main_symptoms": ["Sintoma 1", "Sintoma 2"],
  "pathology_types": ["Tipo de patologia 1"],
  "clinical_presentation_tags": ["Tag de apresenta√ß√£o 1", "Tag 2"],
  "case_complexity_factors": ["Fator de complexidade 1"],
  "learning_objectives": ["Objetivo de aprendizado 1", "Objetivo 2"],
  "search_keywords": ["palavra-chave1", "palavra-chave2"],
  "case_classification": "diagnostico|diferencial|emergencial|didatico",
  "case_rarity": "comum|raro|muito_raro",
  "educational_value": 5,
  "clinical_relevance": 5,
  "estimated_solve_time": 5,
  "exam_context": "rotina|urgencia|uti|ambulatorio",
  "target_audience": ["Gradua√ß√£o", "Resid√™ncia R1"]
}

DADOS DO CASO:
`;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { caseData, action = 'full_autofill' } = await req.json();
    console.log('üöÄ Received case data:', caseData);
    console.log('üéØ Action requested:', action);

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    let prompt = '';
    let responseFormat = 'json_object';

    switch (action) {
      case 'extract_structured':
        prompt = buildStructuredExtractionPrompt(caseData);
        break;
      case 'suggest_keywords':
        prompt = buildKeywordsPrompt(caseData);
        responseFormat = 'text';
        break;
      case 'classify_complexity':
        prompt = buildComplexityPrompt(caseData);
        break;
      case 'suggest_learning_objectives':
        prompt = buildLearningObjectivesPrompt(caseData);
        break;
      default:
        prompt = buildFullAutofillPrompt(caseData);
    }

    console.log('üìù Generated prompt:', prompt.substring(0, 200) + '...');

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        response_format: { type: responseFormat },
        max_tokens: 2000,
        temperature: 0.3
      }),
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('‚ùå OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${openaiResponse.status} - ${errorText}`);
    }

    const openaiData = await openaiResponse.json();
    console.log('‚úÖ OpenAI response received');

    const content = openaiData.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content received from OpenAI');
    }

    let suggestions;
    if (responseFormat === 'json_object') {
      try {
        suggestions = JSON.parse(content);
        console.log('üìä Parsed suggestions:', suggestions);
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError);
        console.error('Raw content:', content);
        throw new Error('Failed to parse OpenAI response as JSON');
      }
    } else {
      suggestions = { content };
    }

    return new Response(
      JSON.stringify({ suggestions }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('üí• Function error:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Check function logs for more information'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );
  }
});

function buildStructuredExtractionPrompt(caseData: CaseData): string {
  return `${STRUCTURED_EXTRACTION_PROMPT}
T√≠tulo: ${caseData.title || 'N√£o informado'}
Modalidade: ${caseData.modality || 'N√£o informado'}
Especialidade: ${caseData.specialty || 'N√£o informado'}
Achados: ${caseData.findings || 'N√£o informado'}
Informa√ß√µes Cl√≠nicas: ${caseData.patient_clinical_info || 'N√£o informado'}
Diagn√≥stico Atual: ${caseData.primary_diagnosis || caseData.diagnosis_internal || 'N√£o informado'}

Extraia TODAS as informa√ß√µes estruturadas poss√≠veis em formato JSON v√°lido.`;
}

function buildKeywordsPrompt(caseData: CaseData): string {
  return `Gere palavras-chave para busca deste caso radiol√≥gico.

CASO:
T√≠tulo: ${caseData.title || 'N√£o informado'}
Modalidade: ${caseData.modality || 'N√£o informado'}
Achados: ${caseData.findings || 'N√£o informado'}
Diagn√≥stico: ${caseData.primary_diagnosis || 'N√£o informado'}

Retorne 10-15 palavras-chave relevantes separadas por v√≠rgula, incluindo:
- Termos m√©dicos espec√≠ficos
- Modalidade de imagem
- Regi√£o anat√¥mica
- Patologia
- Sintomas relacionados

Exemplo: pneumonia, consolida√ß√£o, radiografia, t√≥rax, pulm√£o, infec√ß√£o, febre, dispneia`;
}

function buildComplexityPrompt(caseData: CaseData): string {
  return `Analise a complexidade deste caso radiol√≥gico e classifique.

CASO:
${JSON.stringify(caseData, null, 2)}

Retorne um JSON com:
{
  "case_rarity": "comum|raro|muito_raro",
  "educational_value": 1-10,
  "clinical_relevance": 1-10,
  "estimated_solve_time": minutos,
  "case_complexity_factors": ["fator1", "fator2"],
  "target_audience": ["p√∫blico1", "p√∫blico2"]
}`;
}

function buildLearningObjectivesPrompt(caseData: CaseData): string {
  return `Crie objetivos de aprendizado para este caso radiol√≥gico.

CASO:
${JSON.stringify(caseData, null, 2)}

Retorne um JSON com:
{
  "learning_objectives": ["objetivo1", "objetivo2", "objetivo3"],
  "clinical_presentation_tags": ["tag1", "tag2"],
  "differential_diagnoses": ["diagn√≥stico1", "diagn√≥stico2"]
}

Os objetivos devem ser espec√≠ficos, mensur√°veis e educacionalmente relevantes.`;
}

function buildFullAutofillPrompt(caseData: CaseData): string {
  return `${STRUCTURED_EXTRACTION_PROMPT}

CASO COMPLETO:
${JSON.stringify(caseData, null, 2)}

Preencha TODOS os campos estruturados poss√≠veis baseado nas informa√ß√µes dispon√≠veis.
Se algum campo n√£o puder ser determinado, use um valor padr√£o apropriado.`;
}
