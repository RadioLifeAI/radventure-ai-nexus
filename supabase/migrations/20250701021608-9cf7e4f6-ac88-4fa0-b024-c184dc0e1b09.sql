
-- Adicionar campos de n√≠vel e t√≠tulo ao perfil do usu√°rio
ALTER TABLE public.profiles 
ADD COLUMN user_level INTEGER DEFAULT 1,
ADD COLUMN current_xp INTEGER DEFAULT 0,
ADD COLUMN active_title TEXT DEFAULT NULL;

-- Criar tabela de configura√ß√£o de n√≠veis
CREATE TABLE public.user_levels (
  id SERIAL PRIMARY KEY,
  level INTEGER NOT NULL UNIQUE,
  xp_required INTEGER NOT NULL,
  title_unlocked TEXT,
  radcoin_reward INTEGER DEFAULT 0,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Criar tabela de t√≠tulos desbloqueados por usu√°rio
CREATE TABLE public.user_titles (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  unlocked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_active BOOLEAN DEFAULT FALSE,
  UNIQUE(user_id, title)
);

-- Habilitar RLS nas novas tabelas
ALTER TABLE public.user_titles ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para user_titles
CREATE POLICY "Users can view their own titles" ON public.user_titles
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can update their own titles" ON public.user_titles
  FOR UPDATE USING (user_id = auth.uid());

-- Inserir configura√ß√£o inicial de n√≠veis com tem√°tica radiol√≥gica
INSERT INTO public.user_levels (level, xp_required, title_unlocked, radcoin_reward, description) VALUES
(1, 0, 'Estudante de Radiologia', 0, 'In√≠cio da jornada radiol√≥gica'),
(2, 100, 'T√©cnico Iniciante', 50, 'Primeiros passos na interpreta√ß√£o'),
(3, 250, 'Observador Atento', 75, 'Desenvolvendo o olhar cl√≠nico'),
(4, 500, 'Analista de Imagens', 100, 'Interpreta√ß√£o b√°sica consolidada'),
(5, 800, 'Especialista Junior', 150, 'Conhecimento em m√∫ltiplas modalidades'),
(6, 1200, 'Radiologista Competente', 200, 'Diagn√≥sticos precisos e confi√°veis'),
(7, 1700, 'Expert em Diagn√≥stico', 300, 'Casos complexos dominados'),
(8, 2500, 'Mestre da Radiologia', 400, 'Refer√™ncia em interpreta√ß√£o'),
(9, 3500, 'Professor Radiol√≥gico', 500, 'Conhecimento enciclop√©dico'),
(10, 5000, 'Lenda da Radiologia', 1000, 'O √°pice da excel√™ncia radiol√≥gica');

-- Fun√ß√£o para calcular n√≠vel baseado em pontos
CREATE OR REPLACE FUNCTION public.calculate_user_level(p_total_points INTEGER)
RETURNS TABLE(level INTEGER, xp_required INTEGER, next_level_xp INTEGER, title TEXT, progress_percentage NUMERIC)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_level INTEGER := 1;
  current_xp INTEGER := 0;
  next_xp INTEGER := 100;
  current_title TEXT := 'Estudante de Radiologia';
  progress NUMERIC := 0;
BEGIN
  -- Encontrar o n√≠vel atual baseado nos pontos
  SELECT ul.level, ul.xp_required, COALESCE(ul.title_unlocked, 'Estudante de Radiologia')
  INTO current_level, current_xp, current_title
  FROM public.user_levels ul
  WHERE ul.xp_required <= p_total_points
  ORDER BY ul.level DESC
  LIMIT 1;
  
  -- Encontrar XP necess√°rio para pr√≥ximo n√≠vel
  SELECT ul.xp_required INTO next_xp
  FROM public.user_levels ul
  WHERE ul.level = current_level + 1;
  
  -- Se n√£o h√° pr√≥ximo n√≠vel, usar o XP atual como m√°ximo
  IF next_xp IS NULL THEN
    next_xp := current_xp;
    progress := 100;
  ELSE
    -- Calcular progresso percentual
    progress := CASE 
      WHEN next_xp = current_xp THEN 100
      ELSE ROUND(((p_total_points - current_xp)::NUMERIC / (next_xp - current_xp)::NUMERIC) * 100, 1)
    END;
  END IF;
  
  RETURN QUERY SELECT current_level, current_xp, next_xp, current_title, progress;
END;
$$;

-- Fun√ß√£o para processar level up e dar recompensas
CREATE OR REPLACE FUNCTION public.process_level_up(p_user_id UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_points INTEGER;
  old_level INTEGER;
  new_level_data RECORD;
  radcoin_reward INTEGER := 0;
  level_up_occurred BOOLEAN := FALSE;
  result JSONB;
BEGIN
  -- Buscar pontos atuais e n√≠vel do usu√°rio
  SELECT total_points, user_level INTO user_points, old_level
  FROM public.profiles WHERE id = p_user_id;
  
  -- Calcular novo n√≠vel
  SELECT * INTO new_level_data
  FROM public.calculate_user_level(user_points);
  
  -- Verificar se houve level up
  IF new_level_data.level > old_level THEN
    level_up_occurred := TRUE;
    
    -- Buscar recompensa do novo n√≠vel
    SELECT radcoin_reward INTO radcoin_reward
    FROM public.user_levels
    WHERE level = new_level_data.level;
    
    -- Atualizar perfil com novo n√≠vel
    UPDATE public.profiles
    SET user_level = new_level_data.level,
        current_xp = user_points,
        active_title = COALESCE(active_title, new_level_data.title),
        updated_at = NOW()
    WHERE id = p_user_id;
    
    -- Desbloquear t√≠tulo se dispon√≠vel
    IF new_level_data.title IS NOT NULL THEN
      INSERT INTO public.user_titles (user_id, title, is_active)
      VALUES (p_user_id, new_level_data.title, active_title IS NULL)
      ON CONFLICT (user_id, title) DO NOTHING;
    END IF;
    
    -- Dar RadCoins de recompensa
    IF radcoin_reward > 0 THEN
      PERFORM public.award_radcoins(
        p_user_id, 
        radcoin_reward, 
        'level_up',
        jsonb_build_object(
          'new_level', new_level_data.level,
          'title_unlocked', new_level_data.title
        )
      );
    END IF;
    
    -- Criar notifica√ß√£o de level up
    INSERT INTO public.notifications (
      user_id, type, title, message, priority, action_url, action_label, metadata
    ) VALUES (
      p_user_id,
      'level_up',
      'üÜô Level Up! N√≠vel ' || new_level_data.level,
      'Parab√©ns! Voc√™ alcan√ßou o n√≠vel ' || new_level_data.level || ' e desbloqueou o t√≠tulo "' || new_level_data.title || '"!',
      'high',
      '/app/dashboard',
      'Ver Progresso',
      jsonb_build_object(
        'new_level', new_level_data.level,
        'radcoin_reward', radcoin_reward,
        'title_unlocked', new_level_data.title
      )
    );
  ELSE
    -- Apenas atualizar XP atual
    UPDATE public.profiles
    SET current_xp = user_points,
        updated_at = NOW()
    WHERE id = p_user_id;
  END IF;
  
  -- Retornar resultado
  result := jsonb_build_object(
    'level_up_occurred', level_up_occurred,
    'old_level', old_level,
    'new_level', new_level_data.level,
    'radcoin_reward', radcoin_reward,
    'title_unlocked', new_level_data.title,
    'progress_percentage', new_level_data.progress_percentage,
    'current_xp', user_points,
    'next_level_xp', new_level_data.next_level_xp
  );
  
  RETURN result;
END;
$$;

-- Trigger para processar level up automaticamente quando pontos mudarem
CREATE OR REPLACE FUNCTION public.trigger_level_up_check()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  -- S√≥ processar se os pontos aumentaram
  IF NEW.total_points > OLD.total_points THEN
    PERFORM public.process_level_up(NEW.id);
  END IF;
  RETURN NEW;
END;
$$;

-- Criar trigger
CREATE TRIGGER check_level_up_on_points_change
  AFTER UPDATE OF total_points ON public.profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.trigger_level_up_check();
